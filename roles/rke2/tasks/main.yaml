---
- name: Deploy RKE2 Agent Configuration
  ansible.builtin.template:
    src: templates/rke2-agent-config.j2
    dest: /etc/rancher/rke2/config.yaml
    owner: root
    group: root
    mode: '0644'
  when: inventory_hostname in groups['agents'] or inventory_hostname in groups['longhorn']
  notify: Restart rke2-agent
  # Deploy RKE2 Agent Configuration

- name: Ensure RKE2 agents are enabled
  ansible.builtin.systemd:
    name: rke2-agent
    enabled: true
    state: started
    daemon_reload: true
  when: inventory_hostname in groups['agents'] or inventory_hostname in groups['longhorn']
  # Ensure RKE2 agents are enabled

- name: Deploy RKE2 server Configuration
  ansible.builtin.template:
    src: templates/rke2-server-config.j2
    dest: /etc/rancher/rke2/config.yaml
    owner: root
    group: root
    mode: '0644'
  when: inventory_hostname != groups['servers'][0]
  # Deploy RKE2 server Configuration

- name: Wait for cluster API to be ready (can take 5-10 mins depending on internet/hardware)
  ansible.builtin.command:
    cmd: "kubectl get nodes"
  register: kubectl_output
  until: "'connection refused' not in kubectl_output.stderr"
  retries: 120
  delay: 10
  changed_when: true
  become: true
  become_user: "{{ ansible_user }}"
  when: inventory_hostname == groups['servers'][0]
  # Wait for cluster API to be ready

- name: Apply kube vip configuration file
  ansible.builtin.command:
    cmd: "kubectl --kubeconfig /etc/rancher/rke2/rke2.yaml apply -f https://kube-vip.io/manifests/rbac.yaml"
  changed_when: true
  when: inventory_hostname == groups['servers'][0]
  # Apply kube vip configuration file

- name: Apply kube vip configuration file
  ansible.builtin.command:
    cmd: >
      kubectl --kubeconfig /etc/rancher/rke2/rke2.yaml apply
      -f https://raw.githubusercontent.com/kube-vip/kube-vip-cloud-provider/main/manifest/kube-vip-cloud-controller.yaml
  changed_when: true
  when: inventory_hostname == groups['servers'][0]
  # Apply kube vip configuration file

- name: Ensure additional RKE2 servers are enabled and running
  ansible.builtin.systemd:
    name: rke2-server
    enabled: true
    state: restarted
    daemon_reload: true
  when: inventory_hostname != groups['servers'][0]
  # Ensure additional RKE2 servers are enabled and running

- name: Ensure RKE2 server is enabled and running
  ansible.builtin.systemd:
    name: rke2-server
    enabled: true
    state: restarted
    daemon_reload: true
  when: inventory_hostname != groups['servers'][0]
  # Ensure RKE2 server is enabled and running
